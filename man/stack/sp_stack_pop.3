.\"  Staple - A general-purpose data structure library in pure C89.
.\"  Copyright (C) 2021  Randoragon
.\"
.\"  This library is free software; you can redistribute it and/or
.\"  modify it under the terms of the GNU Lesser General Public
.\"  License as published by the Free Software Foundation;
.\"  version 2.1 of the License.
.\"
.\"  This library is distributed in the hope that it will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\"  Lesser General Public License for more details.
.\"
.\"  You should have received a copy of the GNU Lesser General Public
.\"  License along with this library; if not, write to the Free Software
.\"  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
.\"--------------------------------------------------------------------------------
.TH SP_STACK_POP 3 DATE "libstaple-VERSION"
.SH NAME
sp_stack_pop,
sp_stack_popc,
sp_stack_pops,
sp_stack_popi,
sp_stack_popl,
sp_stack_popsc,
sp_stack_popuc,
sp_stack_popus,
sp_stack_popui,
sp_stack_popul,
sp_stack_popf,
sp_stack_popd,
sp_stack_popld,
sp_stack_popll,
sp_stack_popull,
sp_stack_popu8,
sp_stack_popu16,
sp_stack_popu32,
sp_stack_popu64,
sp_stack_popi8,
sp_stack_popi16,
sp_stack_popi32,
sp_stack_popi64,
sp_stack_popstr
\- remove and retrieve the top element of a stack
.SH SYNOPSIS
.ad l
#include <staple.h>
.sp
int
.BR sp_stack_pop "(struct sp_stack"
.RI * stack ,
int
.RI (* dtor )(void*))
.br
char
.BR sp_stack_popc "(struct sp_stack"
.RI * stack )
.br
short
.BR sp_stack_pops "(struct sp_stack"
.RI * stack )
.br
int
.BR sp_stack_popi "(struct sp_stack"
.RI * stack )
.br
long
.BR sp_stack_popl "(struct sp_stack"
.RI * stack )
.br
signed char
.BR sp_stack_popsc "(struct sp_stack"
.RI * stack )
.br
unsigned char
.BR sp_stack_popuc "(struct sp_stack"
.RI * stack )
.br
unsigned short
.BR sp_stack_popus "(struct sp_stack"
.RI * stack )
.br
unsigned int
.BR sp_stack_popui "(struct sp_stack"
.RI * stack )
.br
unsigned long
.BR sp_stack_popul "(struct sp_stack"
.RI * stack )
.br
float
.BR sp_stack_popf "(struct sp_stack"
.RI * stack )
.br
double
.BR sp_stack_popd "(struct sp_stack"
.RI * stack )
.br
long double
.BR sp_stack_popld "(struct sp_stack"
.RI * stack )
.br
long long
.BR sp_stack_popll "(struct sp_stack"
.RI * stack )
.br
unsigned long long
.BR sp_stack_popull "(struct sp_stack"
.RI * stack )
.br
uint8_t
.BR sp_stack_popu8 "(struct sp_stack"
.RI * stack )
.br
uint16_t
.BR sp_stack_popu16 "(struct sp_stack"
.RI * stack )
.br
uint32_t
.BR sp_stack_popu32 "(struct sp_stack"
.RI * stack )
.br
uint64_t
.BR sp_stack_popu64 "(struct sp_stack"
.RI * stack )
.br
int8_t
.BR sp_stack_popi8 "(struct sp_stack"
.RI * stack )
.br
int16_t
.BR sp_stack_popi16 "(struct sp_stack"
.RI * stack )
.br
int32_t
.BR sp_stack_popi32 "(struct sp_stack"
.RI * stack )
.br
int64_t
.BR sp_stack_popi64 "(struct sp_stack"
.RI * stack )
.br
char
.RB * sp_stack_popstr "(struct sp_stack"
.RI * stack )
.sp
Link with \fI-lstaple\fP.
.ad
.SH DESCRIPTION
The functions in the
.BR sp_stack_pop ()
family are used to remove the top element of a stack.
.br
Attempting to pop an element from an empty stack yields undefined behavior,
except in debug mode (see
.BR ERRORS ).
.P
.I stack
is the stack.
.SS Generic Form
.I dtor
is a pointer to a destructor function that shall be invoked on the removed
element. This mechanism is useful if individual stack elements own memory
that should be freed (see EXAMPLES). If no such destructor function is needed,
.B NULL
can be passed to skip this functionality.
.SH RETURN VALUE
.SS Generic Form
If successful, the
.BR sp_stack_pop ()
function shall return 0. Otherwise, it shall return a code indicating the
error.
.SS Suffixed Form
The suffixed
.BR sp_stack_pop ()
functions shall return the value of the popped element.
.P
The
.BR sp_stack_popstr ()
function returns a pointer to the memory block containing the popped string.
The user must manually
.BR free (3)
the block, otherwise the memory will leak!
.SH ERRORS
.SS Generic Form
The
.BR sp_stack_pop ()
function shall fail if:
.IP \fBSP_EINVAL\fP 1.5i
.I stack
is a null pointer (debug mode only).
.IP \fBSP_EILLEGAL\fP 1.5i
.I stack
is empty (debug mode only).
.IP \fBSP_ECALLBK\fP 1.5i
.I dtor
returned non-0.
.SS Suffixed Form
The suffixed
.BR sp_stack_pop ()
functions shall fail if:
.IP \fB0\fP 1.5i
.I stack
is a null pointer (debug mode only).
.IP \fB0\fP 1.5i
.I stack
is empty (debug mode only).
.IP \fB0\fP 1.5i
.IR stack->elem_size
does not match the size of the function's return type (debug mode only).
.P
(the
.BR sp_stack_popstr ()
function returns
.B NULL
instead of 0)
.SH NOTES
In debug mode, functions of the suffixed form (except
.BR sp_stack_popstr ())
do not provide an unambiguous error-detecting interface with return codes.
Returning 0 should be considered more so a fallback mechanism, since it doesn't
imply that an error has occurred.
.P
This means there is a guaranteed runtime uncertainty whenever one of these
functions in debug mode returns 0. However, the functions shall still print
error messages when appropriate, so failures can be told apart from successes by
the presence or absence of those (quiet mode needs to be disabled).
.P
At first, this ambiguity might seem strange and unacceptable. However, it is
justified in two ways:
.IP (1)
It is very convenient to have these functions return the value of the element
directly.
.sp -1
.IP (2)
The only errors that can occur are such resulting from library misuse by the
end-user, and not caused by uncontrollable factors such as insufficient memory,
etc. Program logic itself should guarantee safety from these errors.
.P
The generic
.BR sp_stack_pop ()
function does not return the popped element. To work around this limitation,
one should use
.BR sp_stack_peek ()
to manually copy the element prior to its removal:
.IP
.ad l
.nf
/* If element type is known */
elem_t elem = *(elem_t*)sp_stack_peek(stack);

/* If only element size is known */
void *elem = malloc(stack->elem_size);
memcpy(elem, sp_stack_peek(stack), stack->elem_size);
.fi
.ad
.SH CONFORMING TO
See
.BR libstaple (7).
.SH EXAMPLES
This is an example of how to use the
.I dtor
function:
.IP
.ad l
.nf
struct example {
        void *ptr;
};

int example_dtor(void *elem)
{
        free(((struct example*)elem)->ptr);
        return 0;
}

int main()
{
        struct sp_stack *s;
        struct example data;
        s = sp_stack_create(sizeof(struct example), 1);
        data.ptr = malloc(32);
        sp_stack_push(s, &data);
        sp_stack_pop(s, &example_dtor);
        /* The above function call is equivalent to:
                example_dtor(sp_stack_peek(s))
                sp_stack_pop(s, NULL);
        */
        return 0;
}
.fi
.ad
.SH SEE ALSO
.ad l
.BR libstaple (7),
.BR sp_stack (7),
.BR sp_stack_create (3),
.BR sp_stack_destroy (3),
.BR sp_stack_clear (3),
.BR sp_stack_push (3),
.BR sp_stack_peek (3),
.BR sp_stack_insert (3),
.BR sp_stack_remove (3),
.BR sp_stack_qinsert (3),
.BR sp_stack_qremove (3),
.BR sp_stack_get (3),
.BR sp_stack_set (3),
.BR sp_stack_eq (3),
.BR sp_stack_copy (3),
.BR sp_stack_map (3),
.BR sp_stack_print (3),
.BR free (3)
