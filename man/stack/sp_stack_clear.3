.\"  Staple - A general-purpose data structure library in pure C89.
.\"  Copyright (C) 2021  Randoragon
.\"
.\"  This library is free software; you can redistribute it and/or
.\"  modify it under the terms of the GNU Lesser General Public
.\"  License as published by the Free Software Foundation;
.\"  version 2.1 of the License.
.\"
.\"  This library is distributed in the hope that it will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\"  Lesser General Public License for more details.
.\"
.\"  You should have received a copy of the GNU Lesser General Public
.\"  License along with this library; if not, write to the Free Software
.\"  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
.\"--------------------------------------------------------------------------------
.TH SP_STACK_CLEAR 3 DATE "libstaple-VERSION"
.SH NAME
sp_stack_clear \- remove all elements from a stack
.SH SYNOPSIS
.ad l
#include <staple.h>
.sp
int
.BR sp_stack_clear "(struct sp_stack"
.RI * stack ,
int
.RI (* dtor )(void*))
.sp
Link with \fI-lstaple\fP.
.ad
.SH DESCRIPTION
The
.BR sp_stack_clear ()
function removes every element from a stack. The stack does not have to contain
any elements, in which case nothing happens.
.P
.I stack
is a pointer to the stack that shall be cleared.
.P
.I dtor
is a pointer to a destructor function that shall be invoked on every element of
the stack.  This mechanism is useful if individual stack elements own memory
that should be freed (see EXAMPLES). If no such destructor function is needed,
.B NULL
can be passed to skip this functionality.
Boolean stacks (stacks created with
.BR SP_SIZEOF_BOOL )
do not support destructor functions
.RI ( dtor
must be
.BR NULL ).
.P
The function pointed to by
.I dtor
must return 0 for success, and anything else for failure. In debug mode, the
caught error code (if any) is printed on stderr.
.SH RETURN VALUE
If successful, the
.BR sp_stack_clear ()
function shall return 0. Otherwise, it shall return a code indicating the
error.
.SH ERRORS
The
.BR sp_stack_clear ()
function shall fail if:
.IP \fBSP_EINVAL\fP 1.5i
.I stack
is a null pointer (debug mode only).
.IP \fBSP_EILLEGAL\fP 1.5i
.I stack
is boolean and
.I dtor
is
.RB non- NULL
(debug mode only).
.IP \fBSP_ECALLBK\fP 1.5i
.I dtor
returned non-0 for some stack element.
.SH CONFORMING TO
See
.BR libstaple (7).
.SH NOTES
When clearing a stack of strings (populated using the suffixed
.B str
or
.B strn
functions), it is necessary to free the string memory blocks with a destructor
function. For convenience, the library offers
.BR sp_free (3),
which is specifically suited for this purpose.
.SH EXAMPLES
This is an example of how to use the
.I dtor
function:
.IP
.ad l
.nf
struct example {
	void *ptr;
};

int example_dtor(void *elem)
{
	free(((struct example*)elem)->ptr);
	return 0;
}

int main()
{
	struct sp_stack *s;
	struct example data;
	s = sp_stack_create(sizeof(struct example), 1);
	data.ptr = malloc(32);
	sp_stack_push(s, &data);
	sp_stack_destroy(s, &example_dtor);
	/* The above function call is equivalent to:
	       sp_stack_clear(s, &example_dtor);
	       sp_stack_destroy(s, NULL);
	*/
	return 0;
}
.fi
.ad
.SH SEE ALSO
.ad l
.BR libstaple (7),
.BR sp_stack (7),
.BR sp_stack_create (3),
.BR sp_stack_destroy (3),
.BR sp_stack_push (3),
.BR sp_stack_peek (3),
.BR sp_stack_pop (3),
.BR sp_stack_insert (3),
.BR sp_stack_remove (3),
.BR sp_stack_qinsert (3),
.BR sp_stack_qremove (3),
.BR sp_stack_get (3),
.BR sp_stack_set (3),
.BR sp_stack_eq (3),
.BR sp_stack_copy (3),
.BR sp_stack_map (3),
.BR sp_stack_print (3),
.BR sp_free (3)
