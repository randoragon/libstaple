.\"  Staple - A general-purpose data structure library in pure C89.
.\"  Copyright (C) 2021  Randoragon
.\"
.\"  This library is free software; you can redistribute it and/or
.\"  modify it under the terms of the GNU Lesser General Public
.\"  License as published by the Free Software Foundation;
.\"  version 2.1 of the License.
.\"
.\"  This library is distributed in the hope that it will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\"  Lesser General Public License for more details.
.\"
.\"  You should have received a copy of the GNU Lesser General Public
.\"  License along with this library; if not, write to the Free Software
.\"  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
.\"--------------------------------------------------------------------------------
.TH SP_STACK_SET 3 DATE "libstaple-VERSION"
.SH NAME
sp_stack_set,
sp_stack_setc,
sp_stack_sets,
sp_stack_seti,
sp_stack_setl,
sp_stack_setsc,
sp_stack_setuc,
sp_stack_setus,
sp_stack_setui,
sp_stack_setul,
sp_stack_setf,
sp_stack_setd,
sp_stack_setld,
sp_stack_setll,
sp_stack_setull,
sp_stack_setu8,
sp_stack_setu16,
sp_stack_setu32,
sp_stack_setu64,
sp_stack_seti8,
sp_stack_seti16,
sp_stack_seti32,
sp_stack_seti64,
sp_stack_setstr,
sp_stack_setstrn
\- set the value of an arbitrary element in a stack
.SH SYNOPSIS
.ad l
#include <staple.h>
.sp
int
.BR sp_stack_set "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
void
.RI * val )
.br
int
.BR sp_stack_setc "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
char
.IR val )
.br
int
.BR sp_stack_sets "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
short
.IR val )
.br
int
.BR sp_stack_seti "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
int
.IR val )
.br
int
.BR sp_stack_setl "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
long
.IR val )
.br
int
.BR sp_stack_setsc "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
signed char
.IR val )
.br
int
.BR sp_stack_setuc "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
unsigned char
.IR val )
.br
int
.BR sp_stack_setus "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
unsigned short
.IR val )
.br
int
.BR sp_stack_setui "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
unsigned int
.IR val )
.br
int
.BR sp_stack_setul "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
unsigned long
.IR val )
.br
int
.BR sp_stack_setf "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
float
.IR val )
.br
int
.BR sp_stack_setd "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
double
.IR val )
.br
int
.BR sp_stack_setld "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
long double
.IR val )
.br
int
.BR sp_stack_setll "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
long long
.IR val )
.br
int
.BR sp_stack_setull "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
unsigned long long
.IR val )
.br
int
.BR sp_stack_setu8 "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
uint8_t
.IR val )
.br
int
.BR sp_stack_setu16 "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
uint16_t
.IR val )
.br
int
.BR sp_stack_setu32 "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
uint32_t
.IR val )
.br
int
.BR sp_stack_setu64 "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
uint64_t
.IR val )
.br
int
.BR sp_stack_seti8 "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
int8_t
.IR val )
.br
int
.BR sp_stack_seti16 "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
int16_t
.IR val )
.br
int
.BR sp_stack_seti32 "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
int32_t
.IR val )
.br
int
.BR sp_stack_seti64 "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
int64_t
.IR val )
.br
int
.BR sp_stack_setb "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
int
.IR val )
.br
int
.BR sp_stack_setstr "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
const char
.RI * val )
.br
int
.BR sp_stack_setstrn "(const struct sp_stack"
.RI * stack ,
size_t
.IR idx ,
const char
.RI * val ,
size_t
.IR len )
.sp
Link with \fI-lstaple\fP.
.ad
.SH DESCRIPTION
.P
The functions in the
.BR sp_stack_set ()
family are used to set the value of an arbitrary element in a stack. The
previous value is overwritten and non-recoverable.
.P
.I stack
is the stack.
.P
.I idx
is the index of the element that shall be overwritten. Indices start from 0 and
extend downwards \(em 0 is the top element, 1 is the element below it, and so
on.
.br
.I idx
must be smaller or equal to
.IR stack->size .
.P
.I val
is the new value for the element at position
.IR idx .
.SS Generic Form
.I val
must be a void pointer to the first byte of the new value. The source and
destination blocks must not overlap in memory. The number of bytes to copy is
equal to
.IR stack->elem_size
field.
.SS Suffixed Form
.I val
is passed directly in the function argument.
.P
The
.BR sp_stack_setstr ()
function creates a copy of the string pointed to by
.I val
and stores the new pointer on the stack. The string must fit in
.I SIZE_MAX
bytes, including the null terminator. The previous string is freed.
.P
The
.BR sp_stack_setstrn ()
function is equivalent to
.BR sp_stack_setstr (),
except it shall always copy exactly
.I len
bytes and append a null terminator at the end.
.I len
must be smaller than
.IR SIZE_MAX .
.SH RETURN VALUE
If successful, the functions in the
.BR sp_stack_set ()
family shall return 0. Otherwise, they shall return a code indicating the
error.
.SH ERRORS
The functions in the
.BR sp_stack_set ()
family shall fail if:
.IP \fBSP_EINVAL\fP 1.5i
.I stack
is a null pointer (debug mode only).
.IP \fBSP_EINDEX\fP 1.5i
.I idx
out of range (debug mode only).
.SS Generic Form
.IP \fBSP_EINVAL\fP 1.5i
.I val
is a null pointer (debug mode only).
.SS Suffixed Form
.IP \fBSP_EILLEGAL\fP 1.5i
.IR stack->elem_size
does not match the size of the
.I val
argument (debug mode only).
.P
The
.BR sp_stack_setstr ()
and
.BR sp_stack_setstrn ()
functions shall fail if:
.IP \fBSP_EINVAL\fP 1.5i
.I val
is a null pointer (debug mode only).
.IP \fBSP_ERANGE\fP 1.5i
string too long or
.I len
too large.
.IP \fBSP_ENOMEM\fP 1.5i
Memory allocation failed.
.SH CONFORMING TO
See
.BR libstaple (7).
.SH SEE ALSO
.ad l
.BR libstaple (7),
.BR sp_stack (7),
.BR sp_stack_create (3),
.BR sp_stack_destroy (3),
.BR sp_stack_clear (3),
.BR sp_stack_push (3),
.BR sp_stack_peek (3),
.BR sp_stack_pop (3),
.BR sp_stack_insert (3),
.BR sp_stack_remove (3),
.BR sp_stack_qinsert (3),
.BR sp_stack_qremove (3),
.BR sp_stack_get (3),
.BR sp_stack_eq (3),
.BR sp_stack_copy (3),
.BR sp_stack_map (3),
.BR sp_stack_print (3)
