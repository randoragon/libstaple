.\"  Staple - A general-purpose data structure library in pure C89.
.\"  Copyright (C) 2021  Randoragon
.\"
.\"  This library is free software; you can redistribute it and/or
.\"  modify it under the terms of the GNU Lesser General Public
.\"  License as published by the Free Software Foundation;
.\"  version 2.1 of the License.
.\"
.\"  This library is distributed in the hope that it will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\"  Lesser General Public License for more details.
.\"
.\"  You should have received a copy of the GNU Lesser General Public
.\"  License along with this library; if not, write to the Free Software
.\"  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
.\"--------------------------------------------------------------------------------
.TH SP_QUEUE_GET 3 DATE "libstaple-VERSION"
.SH NAME
sp_queue_get,
sp_queue_getc,
sp_queue_gets,
sp_queue_geti,
sp_queue_getl,
sp_queue_getsc,
sp_queue_getuc,
sp_queue_getus,
sp_queue_getui,
sp_queue_getul,
sp_queue_getf,
sp_queue_getd,
sp_queue_getld,
sp_queue_getll,
sp_queue_getull,
sp_queue_getu8,
sp_queue_getu16,
sp_queue_getu32,
sp_queue_getu64,
sp_queue_geti8,
sp_queue_geti16,
sp_queue_geti32,
sp_queue_geti64,
sp_queue_getstr
\- look up arbitrary element in a queue
.SH SYNOPSIS
.ad l
#include <staple.h>
.sp
void
.RB * sp_queue_get "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
char
.BR sp_queue_getc "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
short
.BR sp_queue_gets "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
int
.BR sp_queue_geti "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
long
.BR sp_queue_getl "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
signed char
.BR sp_queue_getsc "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
unsigned char
.BR sp_queue_getuc "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
unsigned short
.BR sp_queue_getus "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
unsigned int
.BR sp_queue_getui "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
unsigned long
.BR sp_queue_getul "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
float
.BR sp_queue_getf "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
double
.BR sp_queue_getd "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
long double
.BR sp_queue_getld "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
long long
.BR sp_queue_getll "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
unsigned long long
.BR sp_queue_getull "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
uint8_t
.BR sp_queue_getu8 "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
uint16_t
.BR sp_queue_getu16 "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
uint32_t
.BR sp_queue_getu32 "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
uint64_t
.BR sp_queue_getu64 "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
int8_t
.BR sp_queue_geti8 "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
int16_t
.BR sp_queue_geti16 "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
int32_t
.BR sp_queue_geti32 "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
int64_t
.BR sp_queue_geti64 "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.br
char
.RB * sp_queue_getstr "(const struct sp_queue"
.RI * queue ,
size_t
.IR idx )
.sp
Link with \fI-lstaple\fP.
.ad
.SH DESCRIPTION
.P
The functions in the
.BR sp_queue_get ()
family are used to look up the value of an arbitrary element in a queue. The
looked up element remains on the queue.
.P
.I queue
is the queue.
.P
.I idx
is the index of the element. Indices start from 0 and extend to the rear \(em 0
is the front element, 1 is the element behind it, and so on.
.br
.I idx
must be smaller than
.IR queue->size .
.SS Generic Form
The
.BR sp_queue_get ()
function behaves slightly differently from all other functions in the family. It
is used to access the \fBaddress\fP, not value, of an arbitrary element in a
queue. This is necessary, because value cannot be inferred from arbitrary data.
.P
The
.BR sp_queue_get ()
function has another, very important use case. It pairs up well with all kinds
of functions which intake a pointer to write something into it, e.g.
.BR scanf (3).
In those cases, it may be faster to pass the direct location, rather than
using a proxy variable/buffer. For example, code like:
.sp
.ad l
.nf
	int val;
	scanf("%d", &val);
	sp_queue_seti(queue, idx, val);
.sp
.ad
.fi
can be simplified to:
.sp
.ad l
.nf
	scanf("%d", (int*)sp_queue_get(queue, idx));
.ad
.fi
.SH RETURN VALUE
.SS Generic Form
The
.BR sp_queue_get ()
function shall return the address of the element at \fIidx\fP.
.SS Suffixed Form
The suffixed
.BR sp_queue_get ()
functions shall return the value of the element at \fIidx\fP.
.SH ERRORS
.SS Generic Form
The
.BR sp_queue_get ()
function shall fail if:
.IP \fBNULL\fP 1.5i
Either
.IR queue " or " output
are null pointers (debug mode only).
.IP \fBNULL\fP 1.5i
.I idx
out of range (debug mode only).
.SS Suffixed Form
The suffixed
.BR sp_queue_get ()
functions shall fail if:
.IP \fB0\fP 1.5i
.I queue
is a null pointer (debug mode only).
.IP \fB0\fP 1.5i
.I idx
out of range (debug mode only).
.IP \fB0\fP 1.5i
.IR queue->elem_size
does not match the size of the function's return type (debug mode only).
.P
(the
.BR sp_queue_getstr ()
function returns
.B NULL
instead of 0)
.SH NOTES
In debug mode, functions of the suffixed form (except
.BR sp_queue_getstr ())
do not provide an unambiguous error-detecting interface with return codes.
Returning 0 should be considered more so a fallback mechanism, since it doesn't
imply that an error has occurred.
.P
This means there is a guaranteed runtime uncertainty whenever one of these
functions in debug mode returns 0. However, the functions shall still print
error messages when appropriate, so failures can be told apart from successes by
the presence or absence of those (quiet mode needs to be disabled).
.P
At first, this ambiguity might seem strange and unacceptable. However, it is
justified in two ways:
.IP (1)
It is very convenient to have these functions return the value of the element
directly.
.sp -1
.IP (2)
The only errors that can occur are such resulting from library misuse by the
end-user, and not caused by uncontrollable factors such as insufficient memory,
etc. Program logic itself should guarantee safety from these errors.
.P
It is worth noting that the
.BR sp_queue_getstr ()
function does not create a copy of the string, which means any attempt to
modify the string will affect the queue. Likewise, the pointer will become
invalid if the queue gets destroyed (with a destructor function like
.BR sp_free (3)).
.SH CONFORMING TO
See
.BR libstaple (7).
.SH SEE ALSO
.ad l
.BR libstaple (7),
.BR sp_queue (7),
.BR sp_queue_create (3),
.BR sp_queue_destroy (3),
.BR sp_queue_clear (3),
.BR sp_queue_push (3),
.BR sp_queue_peek (3),
.BR sp_queue_pop (3),
.BR sp_queue_insert (3),
.BR sp_queue_remove (3),
.BR sp_queue_qinsert (3),
.BR sp_queue_qremove (3),
.BR sp_queue_set (3),
.BR sp_queue_eq (3),
.BR sp_queue_copy (3),
.BR sp_queue_map (3),
.BR sp_queue_print (3),
.BR sp_free (3),
.BR scanf (3)
