.\"  Staple - A general-purpose data structure library in pure C89.
.\"  Copyright (C) 2021  Randoragon
.\"
.\"  This library is free software; you can redistribute it and/or
.\"  modify it under the terms of the GNU Lesser General Public
.\"  License as published by the Free Software Foundation;
.\"  version 2.1 of the License.
.\"
.\"  This library is distributed in the hope that it will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\"  Lesser General Public License for more details.
.\"
.\"  You should have received a copy of the GNU Lesser General Public
.\"  License along with this library; if not, write to the Free Software
.\"  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
.\"--------------------------------------------------------------------------------
.TH SP_QUEUE_INSERT 3 DATE "libstaple-VERSION"
.SH NAME
sp_queue_insert,
sp_queue_insertc,
sp_queue_inserts,
sp_queue_inserti,
sp_queue_insertl,
sp_queue_insertsc,
sp_queue_insertuc,
sp_queue_insertus,
sp_queue_insertui,
sp_queue_insertul,
sp_queue_insertf,
sp_queue_insertd,
sp_queue_insertld,
sp_queue_insertll,
sp_queue_insertull,
sp_queue_insertu8,
sp_queue_insertu16,
sp_queue_insertu32,
sp_queue_insertu64,
sp_queue_inserti8,
sp_queue_inserti16,
sp_queue_inserti32,
sp_queue_inserti64,
sp_queue_insertstr,
sp_queue_insertstrn
\- insert an element at any position of a queue
.SH SYNOPSIS
.ad l
#include <staple.h>
.sp
int
.BR sp_queue_insert "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
const void
.RI * elem )
.br
int
.BR sp_queue_insertc "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
char
.IR elem )
.br
int
.BR sp_queue_inserts "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
short
.IR elem )
.br
int
.BR sp_queue_inserti "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
int
.IR elem )
.br
int
.BR sp_queue_insertl "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
long
.IR elem )
.br
int
.BR sp_queue_insertsc "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
signed char
.IR elem )
.br
int
.BR sp_queue_insertuc "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
unsigned char
.IR elem )
.br
int
.BR sp_queue_insertus "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
unsigned short
.IR elem )
.br
int
.BR sp_queue_insertui "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
unsigned int
.IR elem )
.br
int
.BR sp_queue_insertul "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
unsigned long
.IR elem )
.br
int
.BR sp_queue_insertf "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
float
.IR elem )
.br
int
.BR sp_queue_insertd "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
double
.IR elem )
.br
int
.BR sp_queue_insertld "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
long double
.IR elem )
.br
int
.BR sp_queue_insertll "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
long long
.IR elem )
.br
int
.BR sp_queue_insertull "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
unsigned long long
.IR elem )
.br
int
.BR sp_queue_insertu8 "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
uint8_t
.IR elem )
.br
int
.BR sp_queue_insertu16 "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
uint16_t
.IR elem )
.br
int
.BR sp_queue_insertu32 "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
uint32_t
.IR elem )
.br
int
.BR sp_queue_insertu64 "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
uint64_t
.IR elem )
.br
int
.BR sp_queue_inserti8 "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
int8_t
.IR elem )
.br
int
.BR sp_queue_inserti16 "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
int16_t
.IR elem )
.br
int
.BR sp_queue_inserti32 "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
int32_t
.IR elem )
.br
int
.BR sp_queue_inserti64 "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
int64_t
.IR elem )
.br
int
.BR sp_queue_insertstr "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
const char
.RI * elem )
.br
int
.BR sp_queue_insertstrn "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
const char
.RI * elem ,
size_t
.IR len )
.sp
Link with \fI-lstaple\fP.
.ad
.SH DESCRIPTION
The functions in the
.BR sp_queue_insert ()
family are used to insert elements at any position of a queue. The order of
elements before and after the newly inserted element shall be preserved.
.P
.I queue
is the queue that shall be inserted into.
.P
.I idx
is the index at which the new element will be placed. Indices start from 0 and
extend to the rear \(em 0 is the front element, 1 is the element behind it, and
so on.
.br
Inserting at position \fBn\fP requires up to \fBsize / 2\fP elements to be moved
in memory. Inserting at \fBsize\fP has the same effect as
.BR sp_queue_push (3).
.br
.I idx
cannot be larger than
.IR queue->size .
.P
.I elem
is the element to be inserted.
.SS Generic Form
.I elem
must be a void pointer to the first byte of the element that shall be inserted.
The number of bytes to copy is equal to
.IR queue->elem_size
field.
.SS Suffixed Form
.I elem
is passed directly in the function argument.
.P
The
.BR sp_queue_insertstr ()
function creates a copy of the string pointed to by
.I elem
and stores the new pointer on the queue. The string must fit in
.I SIZE_MAX
bytes, including the null terminator.
.P
The
.BR sp_queue_insertstrn ()
function is equivalent to
.BR sp_queue_insertstr (),
except it shall always copy exactly
.I len
bytes and append a null terminator at the end.
.I len
must be smaller than
.IR SIZE_MAX .
.SH RETURN VALUE
If successful, the functions in the
.BR sp_queue_insert ()
family shall return 0. Otherwise, they shall return a code indicating the
error.
.SH ERRORS
The functions in the
.BR sp_queue_insert ()
family shall fail if:
.IP \fBSP_EINVAL\fP 1.5i
.I queue
is a null pointer (debug mode only).
.IP \fBSP_EINDEX\fP 1.5i
.I idx
out of range (debug mode only).
.IP \fBSP_ERANGE\fP 1.5i
Maximum buffer size exceeded. See BUGS in
.BR sp_queue (7).
.IP \fBSP_ENOMEM\fP 1.5i
Memory allocation failed.
.SS Generic Form
The
.BR sp_queue_insert ()
function shall fail if:
.IP \fBSP_EINVAL\fP 1.5i
.I elem
is a null pointer (debug mode only).
.SS Suffixed Form
The suffixed
.BR sp_queue_insert ()
functions shall fail if:
.IP \fBSP_EILLEGAL\fP 1.5i
.IR queue->elem_size
does not match the size of the
.I elem
argument (debug mode only).
.P
The
.BR sp_stack_insertstr ()
and
.BR sp_stack_insertstrn ()
functions shall fail if:
.IP \fBSP_EINVAL\fP 1.5i
.I elem
is a null pointer (debug mode only).
.IP \fBSP_ERANGE\fP 1.5i
string too long or
.I len
too large.
.SH CONFORMING TO
See
.BR libstaple (7).
.SH SEE ALSO
.ad l
.BR libstaple (7),
.BR sp_queue (7),
.BR sp_queue_create (3),
.BR sp_queue_destroy (3),
.BR sp_queue_clear (3),
.BR sp_queue_push (3),
.BR sp_queue_peek (3),
.BR sp_queue_pop (3),
.BR sp_queue_remove (3),
.BR sp_queue_qinsert (3),
.BR sp_queue_qremove (3),
.BR sp_queue_get (3),
.BR sp_queue_set (3),
.BR sp_queue_eq (3),
.BR sp_queue_copy (3),
.BR sp_queue_map (3),
.BR sp_queue_print (3)
