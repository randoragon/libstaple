.\"  Staple - A general-purpose data structure library in pure C89.
.\"  Copyright (C) 2021  Randoragon
.\"
.\"  This library is free software; you can redistribute it and/or
.\"  modify it under the terms of the GNU Lesser General Public
.\"  License as published by the Free Software Foundation;
.\"  version 2.1 of the License.
.\"
.\"  This library is distributed in the hope that it will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\"  Lesser General Public License for more details.
.\"
.\"  You should have received a copy of the GNU Lesser General Public
.\"  License along with this library; if not, write to the Free Software
.\"  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
.\"--------------------------------------------------------------------------------
.TH SP_QUEUE_COPY 3 DATE "libstaple-VERSION"
.SH NAME
sp_queue_copy \- copy contents of one queue to another
.SH SYNOPSIS
.ad l
#include <staple.h>
.sp
int
.BR sp_queue_copy "(struct sp_queue"
.RI * dest ,
.br
.in 20n
const struct sp_queue
.RI * src ,
.br
int
.RI (* cpy ")(void*, const void*))"
.in
.sp
Link with \fI-lstaple\fP.
.ad
.SH DESCRIPTION
The
.BR sp_queue_copy ()
function copies elements one-by-one from
.IR src " to " dest .
.I dest
is expanded to fit all elements of
.IR src ,
if needed.
.br
After a successful operation, both queues are guaranteed to have identical
contents. Capacities may differ after copying, and should never be relied upon
to be equal.
.P
.I dest
must be an initialized and empty queue. Passing a non-empty queue shall
result in undefined behavior.
.P
.I src
is the queue that shall be copied from. Naturally, this implies it must be
initialized, but it needs not to contain any elements.
.P
.I cpy
is a pointer to a copy function that copies a single element from
.IR src " to " dest .
The copy function must be implemented in such a way that the first argument
.RB ( void* )
is the destination address, and the second
.RB ( "const void*" )
is the source address. Instead of an address,
.B NULL
can be passed, in which case
.BR memcpy (3)
shall be used instead.
.P
The function pointed to by
.I cpy
must return 0 for success, and anything else for failure. In debug mode, the
caught error code (if any) is printed on stderr.
.P
The copy function can be custom-tailored to do more than just a copy operation.
For similar purposes, see also
.BR sp_queue_map (3).
.SH RETURN VALUE
If successful, the
.BR sp_queue_copy ()
function shall return 0. Otherwise, it shall return a code indicating the
error.
.SH ERRORS
The
.BR sp_queue_copy ()
function shall fail if:
.IP \fBSP_EINVAL\fP 1.5i
Either
.IR src " or " dest
are null pointers (debug mode only).
.IP \fBSP_ENOMEM\fP 1.5i
Failed to enlarge
.I dest
due to insufficient memory.
.IP \fBSP_ECALLBK\fP 1.5i
.I cpy
returned non-0 for some queue element.
.SH CONFORMING TO
See
.BR libstaple (7).
.SH SEE ALSO
.ad l
.BR libstaple (7),
.BR sp_queue (7),
.BR sp_queue_create (3),
.BR sp_queue_destroy (3),
.BR sp_queue_clear (3),
.BR sp_queue_push (3),
.BR sp_queue_peek (3),
.BR sp_queue_pop (3),
.BR sp_queue_insert (3),
.BR sp_queue_remove (3),
.BR sp_queue_qinsert (3),
.BR sp_queue_qremove (3),
.BR sp_queue_get (3),
.BR sp_queue_set (3),
.BR sp_queue_eq (3),
.BR sp_queue_map (3),
.BR sp_queue_print (3),
.BR memcpy (3)
