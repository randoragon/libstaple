.\"  Staple - A general-purpose data structure library in pure C89.
.\"  Copyright (C) 2021  Randoragon
.\"
.\"  This library is free software; you can redistribute it and/or
.\"  modify it under the terms of the GNU Lesser General Public
.\"  License as published by the Free Software Foundation;
.\"  version 2.1 of the License.
.\"
.\"  This library is distributed in the hope that it will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\"  Lesser General Public License for more details.
.\"
.\"  You should have received a copy of the GNU Lesser General Public
.\"  License along with this library; if not, write to the Free Software
.\"  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
.\"--------------------------------------------------------------------------------
.TH SP_QUEUE_PUSH 3 DATE "libstaple-VERSION"
.SH NAME
sp_queue_push,
sp_queue_pushc,
sp_queue_pushs,
sp_queue_pushi,
sp_queue_pushl,
sp_queue_pushsc,
sp_queue_pushuc,
sp_queue_pushus,
sp_queue_pushui,
sp_queue_pushul,
sp_queue_pushf,
sp_queue_pushd,
sp_queue_pushld,
sp_queue_pushll,
sp_queue_pushull,
sp_queue_pushu8,
sp_queue_pushu16,
sp_queue_pushu32,
sp_queue_pushu64,
sp_queue_pushi8,
sp_queue_pushi16,
sp_queue_pushi32,
sp_queue_pushi64,
sp_queue_pushstr,
sp_queue_pushstrn
\- push a new element to the back of a queue
.SH SYNOPSIS
.ad l
#include <staple.h>
.sp
int
.BR sp_queue_push "(struct sp_queue"
.RI * queue ,
const void
.RI * elem )
.br
int
.BR sp_queue_pushc "(struct sp_queue"
.RI * queue ,
char
.IR elem )
.br
int
.BR sp_queue_pushs "(struct sp_queue"
.RI * queue ,
short
.IR elem )
.br
int
.BR sp_queue_pushi "(struct sp_queue"
.RI * queue ,
int
.IR elem )
.br
int
.BR sp_queue_pushl "(struct sp_queue"
.RI * queue ,
long
.IR elem )
.br
int
.BR sp_queue_pushsc "(struct sp_queue"
.RI * queue ,
signed char
.IR elem )
.br
int
.BR sp_queue_pushuc "(struct sp_queue"
.RI * queue ,
unsigned char
.IR elem )
.br
int
.BR sp_queue_pushus "(struct sp_queue"
.RI * queue ,
unsigned short
.IR elem )
.br
int
.BR sp_queue_pushui "(struct sp_queue"
.RI * queue ,
unsigned int
.IR elem )
.br
int
.BR sp_queue_pushul "(struct sp_queue"
.RI * queue ,
unsigned long
.IR elem )
.br
int
.BR sp_queue_pushf "(struct sp_queue"
.RI * queue ,
float
.IR elem )
.br
int
.BR sp_queue_pushd "(struct sp_queue"
.RI * queue ,
double
.IR elem )
.br
int
.BR sp_queue_pushld "(struct sp_queue"
.RI * queue ,
long double
.IR elem )
.br
int
.BR sp_queue_pushll "(struct sp_queue"
.RI * queue ,
long long
.IR elem )
.br
int
.BR sp_queue_pushull "(struct sp_queue"
.RI * queue ,
unsigned long long
.IR elem )
.br
int
.BR sp_queue_pushu8 "(struct sp_queue"
.RI * queue ,
uint8_t
.IR elem )
.br
int
.BR sp_queue_pushu16 "(struct sp_queue"
.RI * queue ,
uint16_t
.IR elem )
.br
int
.BR sp_queue_pushu32 "(struct sp_queue"
.RI * queue ,
uint32_t
.IR elem )
.br
int
.BR sp_queue_pushu64 "(struct sp_queue"
.RI * queue ,
uint64_t
.IR elem )
.br
int
.BR sp_queue_pushi8 "(struct sp_queue"
.RI * queue ,
int8_t
.IR elem )
.br
int
.BR sp_queue_pushi16 "(struct sp_queue"
.RI * queue ,
int16_t
.IR elem )
.br
int
.BR sp_queue_pushi32 "(struct sp_queue"
.RI * queue ,
int32_t
.IR elem )
.br
int
.BR sp_queue_pushi64 "(struct sp_queue"
.RI * queue ,
int64_t
.IR elem )
.br
int
.BR sp_queue_pushstr "(struct sp_queue"
.RI * queue ,
const char
.RI * elem )
.br
int
.BR sp_queue_pushstrn "(struct sp_queue"
.RI * queue ,
const char
.RI * elem ,
size_t
.IR len )
.sp
Link with \fI-lstaple\fP.
.ad
.SH DESCRIPTION
The functions in the
.BR sp_queue_push ()
family are used to append a new element to a queue. The element's size must
match the queue's
.I elem_size
field, so it is illegal to, for example, create a queue with
.I elem_size
equal to 4, and then use it with the
.BR sp_queue_pushc ()
function.
.P
.I queue
is the queue that shall be pushed onto.
.P
.I
elem
is the element to be pushed.
.SS Generic Form
.I elem
must be a void pointer to the first byte of the element that shall be pushed.
The number of bytes to copy is equal to
.IR queue->elem_size
field.
.SS Suffixed Form
.I elem
is passed directly in the function argument.
.P
The
.BR sp_queue_pushstr ()
function creates a copy of the string pointed to by
.I elem
and stores the new pointer on the queue. The string must fit in
.I SIZE_MAX
bytes, including the null terminator.
.P
The
.BR sp_queue_pushstrn ()
function is equivalent to
.BR sp_queue_pushstr (),
except it shall always copy exactly
.I len
bytes and append a null terminator at the end.
.I len
must be smaller than
.IR SIZE_MAX .
.SH RETURN VALUE
If successful, the functions in the
.BR sp_queue_push ()
family shall return 0. Otherwise, they shall return a code indicating the
error.
.SH ERRORS
The functions in the
.BR sp_queue_push ()
family shall fail if:
.IP \fBSP_EINVAL\fP 1.5i
.I queue
is a null pointer (debug mode only).
.IP \fBSP_ERANGE\fP 1.5i
Maximum buffer size exceeded. See BUGS in
.BR sp_queue (7).
.IP \fBSP_ENOMEM\fP 1.5i
Memory allocation failed.
.SS Generic Form
The
.BR sp_queue_push ()
function shall fail if:
.IP \fBSP_EINVAL\fP 1.5i
.I elem
is a null pointer (debug mode only).
.SS Suffixed Form
The suffixed
.BR sp_queue_push ()
functions shall fail if:
.IP \fBSP_EILLEGAL\fP 1.5i
.IR queue->elem_size
does not match the size of the
.I elem
argument (debug mode only).
.P
The
.BR sp_queue_pushstr ()
and
.BR sp_queue_pushstrn ()
functions shall fail if:
.IP \fBSP_EINVAL\fP 1.5i
.I elem
is a null pointer (debug mode only).
.IP \fBSP_ERANGE\fP 1.5i
string too long or
.I len
too large.
.SH CONFORMING TO
See
.BR libstaple (7).
.SH SEE ALSO
.ad l
.BR libstaple (7),
.BR sp_queue (7),
.BR sp_queue_create (3),
.BR sp_queue_destroy (3),
.BR sp_queue_clear (3),
.BR sp_queue_peek (3),
.BR sp_queue_pop (3),
.BR sp_queue_insert (3),
.BR sp_queue_remove (3),
.BR sp_queue_qinsert (3),
.BR sp_queue_qremove (3),
.BR sp_queue_get (3),
.BR sp_queue_set (3),
.BR sp_queue_eq (3),
.BR sp_queue_copy (3),
.BR sp_queue_map (3),
.BR sp_queue_print (3)
