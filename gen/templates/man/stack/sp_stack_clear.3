.\"M stack
.TH SP_STACK_CLEAR 3 DATE "libstaple-VERSION"
.SH NAME
sp_stack_clear \- remove all elements from a stack
.\". MAN_SYNOPSIS_BEGIN
int
.BR sp_stack_clear "(struct sp_stack"
.RI * stack ,
int
.RI (* dtor )(void*))
.\". MAN_SYNOPSIS_END
.SH DESCRIPTION
The
.BR sp_stack_clear ()
function removes every element from a stack. The stack does not have to contain
any elements, in which case nothing happens.
.P
.I stack
is a pointer to the stack that shall be cleared.
.P
.I dtor
is a pointer to a destructor function that shall be invoked on every element of
the stack.  This mechanism is useful if individual stack elements own memory
that should be freed (see EXAMPLES). If no such destructor function is needed,
.B NULL
can be passed to skip this functionality.
.\". MAN_BOOL_DTOR_UNSUPPORTED stacks
.P
.\". MAN_CALLBK_MUST_RETURN dtor
.SH RETURN VALUE
.\". MAN_RETVAL_0_OR_CODE sp_stack_clear
.SH ERRORS
.\". MAN_SHALL_FAIL_IF sp_stack_clear
.\". MAN_ERRCODE SP_EINVAL
.I stack
is a null pointer (debug mode only).
.\". MAN_ERRCODE SP_EILLEGAL
.I stack
is boolean and
.I dtor
is
.RB non- NULL
(debug mode only).
.\". MAN_ERRCODE SP_ECALLBK
.I dtor
returned non-0 for some stack element.
.\". MAN_CONFORMING_TO
.SH NOTES
.\". MAN_NOTE_CLEARING_STRINGS stack
.SH EXAMPLES
This is an example of how to use the
.I dtor
function:
.\". MAN_CODE_BEGIN IP
struct example {
	void *ptr;
};

int example_dtor(void *elem)
{
	free(((struct example*)elem)->ptr);
	return 0;
}

int main()
{
	struct sp_stack *s;
	struct example data;
	s = sp_stack_create(sizeof(struct example), 1);
	data.ptr = malloc(32);
	sp_stack_push(s, &data);
	sp_stack_destroy(s, &example_dtor);
	/* The above function call is equivalent to:
	       sp_stack_clear(s, &example_dtor);
	       sp_stack_destroy(s, NULL);
	*/
	return 0;
}
.\". MAN_CODE_END
