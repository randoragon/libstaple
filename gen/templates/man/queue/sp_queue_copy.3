.\"M queue
.TH SP_QUEUE_COPY 3 DATE "libstaple-VERSION"
.SH NAME
sp_queue_copy \- copy contents of one queue to another
.\". MAN_SYNOPSIS_BEGIN
int
.BR sp_queue_copy "(struct sp_queue"
.RI * dest ,
.br
.in 20n
const struct sp_queue
.RI * src ,
.br
int
.RI (* cpy ")(void*, const void*))"
.in
.\". MAN_SYNOPSIS_END
.SH DESCRIPTION
The
.BR sp_queue_copy ()
function copies elements one-by-one from
.IR src " to " dest .
.I dest
is expanded to fit all elements of
.IR src ,
if needed.
.br
After a successful operation, both queues are guaranteed to have identical
contents. Capacities may differ after copying, and should never be relied upon
to be equal.
.P
.I dest
must be an initialized and empty queue. Passing a non-empty queue shall
result in undefined behavior.
.P
.I src
is the queue that shall be copied from. Naturally, this implies it must be
initialized, but it needs not to contain any elements.
.P
.I cpy
is a pointer to a copy function that copies a single element from
.IR src " to " dest .
The copy function must be implemented in such a way that the first argument
.RB ( void* )
is the destination address, and the second
.RB ( "const void*" )
is the source address. Instead of an address,
.B NULL
can be passed, in which case
.BR memcpy (3)
shall be used instead.
.P
.\". MAN_CALLBK_MUST_RETURN cpy
.P
The copy function can be custom-tailored to do more than just a copy operation.
For similar purposes, see also
.BR sp_queue_map (3).
.SH RETURN VALUE
.\". MAN_RETVAL_0_OR_CODE sp_queue_copy
.SH ERRORS
.\". MAN_SHALL_FAIL_IF sp_queue_copy
.\". MAN_ERRCODE SP_EINVAL
Either
.IR src " or " dest
are null pointers (debug mode only).
.\". MAN_ERRCODE SP_ENOMEM
Failed to enlarge
.I dest
due to insufficient memory.
.\". MAN_ERRCODE SP_ECALLBK
.I cpy
returned non-0 for some queue element.
.\". MAN_CONFORMING_TO
