.\"M queue
.TH SP_QUEUE_CLEAR 3 DATE "libstaple-VERSION"
.SH NAME
sp_queue_clear \- remove all elements from a queue
.\". MAN_SYNOPSIS_BEGIN
int
.BR sp_queue_clear "(struct sp_queue"
.RI * queue ,
int
.RI (* dtor )(void*))
.\". MAN_SYNOPSIS_END
.SH DESCRIPTION
The
.BR sp_queue_clear ()
function removes every element from a queue. The queue does not have to contain
any elements, in which case nothing happens.
.P
.I queue
is a pointer to the queue that shall be cleared.
.P
.I dtor
is a pointer to a destructor function that shall be invoked on every element of
the queue.  This mechanism is useful if individual queue elements own memory
that should be freed (see EXAMPLES). If no such destructor function is needed,
.B NULL
can be passed to skip this functionality.
.P
.\". MAN_CALLBK_MUST_RETURN dtor
.SH RETURN VALUE
.\". MAN_RETVAL_0_OR_CODE sp_queue_clear
.SH ERRORS
.\". MAN_SHALL_FAIL_IF sp_queue_clear
.\". MAN_ERRCODE SP_EINVAL
.I queue
is a null pointer (debug mode only).
.\". MAN_ERRCODE SP_ECALLBK
.I dtor
returned non-0 for some queue element.
.\". MAN_CONFORMING_TO
.SH NOTES
.\". MAN_NOTE_CLEARING_STRINGS queue
.SH EXAMPLES
This is an example of how to use the
.I dtor
function:
.\". MAN_CODE_BEGIN IP
struct example {
	void *ptr;
};

int example_dtor(void *elem)
{
	free(((struct example*)elem)->ptr);
	return 0;
}

int main()
{
	struct sp_queue *q;
	struct example data;
	q = sp_queue_create(sizeof(struct example), 1);
	data.ptr = malloc(32);
	sp_queue_push(q, &data);
	sp_queue_destroy(q, &example_dtor);
	/* The above function call is equivalent to:
		sp_queue_clear(q, &example_dtor);
		sp_queue_destroy(q, NULL);
	*/
	return 0;
}
.\". MAN_CODE_END
